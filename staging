#!/bin/bash

################################################################################
# @see README.md
################################################################################

# Do not proceed on errors
set -e

################################################################################
# Defaults
################################################################################

# By default we do not display output of subcommands.
STDOUTHANDLER="null"
GITOPTS="--quiet"

#Help function
function HELP {
  echo -e \\n"Usage: staging [-hv] [-m "..."] remote remoteBranch sourceBranch"\\n
}

# Validate remote repo
function VALIDATE_REMOTE {
    # The first argument will be our remote.
    if [ "$1" == "" ]
    then
      echo "No remote given."
      HELP
      exit 1
    elif ! git ls-remote $1 &>/dev/null
    then
      echo "Remote '$1' does not exist."
      exit 1
    else
      echo "(i) Remote: '$1'" >/dev/$STDOUTHANDLER
      STAGING_REMOTE="$1"
    fi
}

# Validate remote branch
function VALIDATE_REMOTE_BRANCH {
    # The second argument will be the remote branch.
    if [ "$2" == "" ]
    then
      echo "No remoteBranch given."
      HELP
      exit 1
    else
      echo "(i) Remote branch '$1/$2'" >/dev/$STDOUTHANDLER
      STAGING_REMOTE_BRANCH="$2"
    fi
}

# Validate local branch
function VALIDATE_LOCAL_BRANCH {
    # The second argument will be the remote branch.
    if [ "$1" == "" ]
    then
      echo "No localBranch given."
      HELP
      exit 1
    else
      echo "(i) Local branch '$1'" >/dev/$STDOUTHANDLER
      LOCAL_BRANCH="$1"
    fi
}

# Validate source branch
function VALIDATE_SOURCE_BRANCH {
    # The third argument will be our source branch.
    if [ "$1" == "" ]
    then
      echo "No sourceBranch given."
      HELP
      exit 1
    elif [ "$(git show-ref $1)" == "" ]
    then
      echo "Source branch '$1' does not exist."
      exit 1
    else
      echo "(i) Source branch '$1'" >/dev/$STDOUTHANDLER
      SOURCE_BRANCH="$1"
    fi
}

################################################################################
# Handle options
# @see http://tuxtweaks.com/2014/05/bash-getopts/
################################################################################

while getopts :vm:lh FLAG; do
  case $FLAG in
    v)  #set verbose output
      STDOUTHANDLER="stdout"
      GITOPTS=""
      set -x
      ;;
    m)  #custom message
      CUSTOM_MESSAGE="$OPTARG"
      ;;
    l) # allow local branch
      LOCAL_BRANCH_MODE=true
      ;;
    h)  #show help
      HELP
      exit
      ;;
    \?) #unrecognized option - show help
      echo -e \\n"Option -$OPTARG not allowed."
      echo -e "Use staging -h to see the help documentation."\\n
      exit 2
      ;;
  esac
done

shift $((OPTIND-1))  #This tells getopts to move on to the next argument.

################################################################################
# Handle arguments
################################################################################

if [ $LOCAL_BRANCH_MODE ]
then

    # Avoid ignoring appended options.
    if [ "$3" != "" ]
    then
      echo "You only must provide two arguments in local branch mode."
      HELP
      exit 1;
    fi

    # The first argument will be our remote.
    VALIDATE_LOCAL_BRANCH "$1"                      # Builds $LOCAL_BRANCH
    VALIDATE_SOURCE_BRANCH "$2"                     # Builds $SOURCE_BRANCH

    STAGING_BRANCH="$LOCAL_BRANCH"

else
    # Avoid ignoring appended options.
    if [ "$4" != "" ]
    then
      echo "You only must provide three arguments."
      HELP
      exit 1;
    fi

    # The first argument will be our remote.
    VALIDATE_REMOTE "$1"                            # Builds $STAGING_REMOTE
    VALIDATE_REMOTE_BRANCH "$STAGING_REMOTE" "$2"   # Builds $STAGING_REMOTE_BRANCH
    VALIDATE_SOURCE_BRANCH "$3"                     # Builds $SOURCE_BRANCH

    STAGING_BRANCH="$STAGING_REMOTE/$STAGING_REMOTE_BRANCH"

fi

################################################################################
# Processing
################################################################################

# Get the current branch, so we can switch back later.
CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)

# First collect the latest code from remote if we got one.
if [ ! $LOCAL_BRANCH_MODE ]
then
    git fetch $GITOPTS $STAGING_REMOTE >/dev/$STDOUTHANDLER
fi

TEMP_BRANCH=temp$(date +%s)

# Stash the current changes (if some present), before switching branch.
if [ "$(git status -s)" == "" ]
then
  STASHED=0
else
  STASHED=1
  echo "(!) Backing up workding directory changes to stash.";
  git stash save --include-untracked "Before stage $TEMP_BRANCH" >/dev/$STDOUTHANDLER
fi

# We build a temporarry local branch for the remote branch.
echo "Building temporary branch: $TEMP_BRANCH" >/dev/$STDOUTHANDLER
if [ "$(git show-ref $STAGING_BRANCH)" == "" ]
then
  # In the case there is no remote branch yet, we create a branch from the current branch.
  git checkout $GITOPTS -b $TEMP_BRANCH >/dev/$STDOUTHANDLER

  # In local branch mode we need to make sure it exists locally.
  if [ $LOCAL_BRANCH_MODE ]
  then
    git branch "$STAGING_BRANCH"
  fi

else
  git checkout $GITOPTS -b $TEMP_BRANCH "$STAGING_BRANCH" >/dev/$STDOUTHANDLER
fi

# Create diff to the source branch
# - reverted, because we want to add the diff to this branch
# - full-index and binary flag are for providing complete information for even
#   applying binary changes
git diff --full-index --binary -R $SOURCE_BRANCH > "$TEMP_BRANCH.patch"

# If the diff is not empty, we need to apply it to the temp branch.
if [ -s "$TEMP_BRANCH.patch" ]
then
  # Get sha from source branch for the commit message.
  SOURCE_SHA=$(git rev-parse "$SOURCE_BRANCH")

  echo "... Building commit from $SOURCE_BRANCH (ref: $SOURCE_SHA)"

  # We might have some whitespace problems, when applying diffs, so we make sure
  # warnings to not kill our processing.
  git apply --whitespace=nowarn "$TEMP_BRANCH.patch" >/dev/$STDOUTHANDLER

  # After applying the patch, we remove the patchfile, so it will not be part of
  # our diff commit.
  rm "$TEMP_BRANCH.patch" >/dev/$STDOUTHANDLER

  # Stage all files and commit it.
  git add -A >/dev/$STDOUTHANDLER

  # If no custom message was given, we use source branch and its commit sha for a message.
  if [ "$CUSTOM_MESSAGE" == "" ]
  then
    COMMIT_MESSAGE="Staging: $SOURCE_BRANCH (sha: $SOURCE_SHA)"
  else
    COMMIT_MESSAGE="$CUSTOM_MESSAGE"
  fi

  git commit -m "$COMMIT_MESSAGE" >/dev/$STDOUTHANDLER
else
  # We only have to remove the patch file, in the case it is empty.
  rm "$TEMP_BRANCH.patch" >/dev/$STDOUTHANDLER
fi

if [ $LOCAL_BRANCH_MODE ]
then
    git checkout $GITOPTS $STAGING_BRANCH
    git merge $GITOPTS $TEMP_BRANCH  >/dev/$STDOUTHANDLER
else
    # In any case we push the state to the remote.
    echo "... Updating remote $STAGING_REMOTE/$STAGING_REMOTE_BRANCH"
    git push $STAGING_REMOTE HEAD:$STAGING_REMOTE_BRANCH >/dev/$STDOUTHANDLER
fi

# Switch back to the further branch.
git checkout $GITOPTS $CURRENT_BRANCH >/dev/$STDOUTHANDLER
# Apply stashed changes back to working directory.
if [ $STASHED == 1 ]
then
  echo "(!) Restored workding directory changes from stash.";
  git stash pop >/dev/$STDOUTHANDLER
fi

# Finally we delete our temporary branch.
git branch -D $TEMP_BRANCH  >/dev/$STDOUTHANDLER
